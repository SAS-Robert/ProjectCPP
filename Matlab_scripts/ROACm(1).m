%% ============== PREVIOUS PROJECT FROM PETERSEN AND NOWAKOWSKA ======
% Auto-generated by Data Acquisition Toolbox Analog Input Recorder on 29-Mar-2019 10:02:25

% 
%% Create Data Acquisition Session
addpath 'C:\Users\Lenovo\Documents\UNI\9.semester\RobertControl';
global t
% Create a session for the specified vendor.
s = daq.createSession('ni'); %Startbackgroud for data collection EMG
t = daq.createSession('ni'); % Start bacground for FES stimulation

%% Set Session Properties
% Set properties that are not using default values.
s.Rate = 1000;
s.IsContinuous = true;
t.Rate = 10000;
t.IsContinuous = true;
 
%% Add Channels to Session
% Add channels and set channel prop
 
addAnalogInputChannel(s,'Dev1','ai0','Voltage');
addAnalogOutputChannel(t,'Dev1', 'ao0', 'Voltage'); 



%% Initialize Session UserData Property
% Initialize the custom fields for managing the acquired data across callbacks.
s.UserData.Data = [];
s.UserData.TimeStamps = [];
s.UserData.StartTime = [];

%% Add Listenerss
% Add listeners to session for available data and error events.
global RMS_EMG
global Movement
global Stop_point
global nb1
global na1
global Cheby100
global a
global b
global threshold
global time_EMG
global cnt_EMG

global Cheby50
time_EMG =[];
cnt_EMG = 1;
global cnt_loop
global time_loop
time_loop =[];
cnt_loop =1;
time_FES =[];
cnt_FES =1;
s.NotifyWhenDataAvailableExceeds = 100; %Kan ?ndres til 250 hvis der skal plottes
t.NotifyWhenScansQueuedBelow = 100;
lh1 = addlistener(s, 'DataAvailable', @recordData);
lh = addlistener(t,'DataRequired', @sendData); % This is a listener i
%disp(getReport(eventData.Error))); % Just an error listener, that i
%commented out.

%% UDP
% %% vores tcp
% ROBERT_CONTROL = tcpip('172.31.1.147',30007); %tcpip for ROBERT controller
% fopen(ROBERT_CONTROL); % open ROBERT_CONTROL (ROBERT will self-diagnose)


        ROBERT_NOT_READY = true;
while ROBERT_NOT_READY
    if ROBERT_CONTROL.BytesAvailable > 0
        message = fread(ROBERT_CONTROL,ROBERT_CONTROL.BytesAvailable);
        messageFromROBERT_CONTROL = native2unicode(message(5:end)');
        if contains(messageFromROBERT_CONTROL,'READY')
            ROBERT_NOT_READY = false;
            disp('ROBERT is ready...')
        end
    end
end

cnt2=1;
ROBERT_CMD = uint8(sprintf('%i;START;ACTIVE;1;%i;2',cnt2,10));
ROBERT_CMD = uint8([length(ROBERT_CMD) 0 0 0 ROBERT_CMD]);
fwrite(ROBERT_CONTROL,ROBERT_CMD);
cnt2=cnt2+1;


%% Slut
%% Setup Filters
Fn = s.Rate/2;
% Hphz = 60/Fn;
% Lphz = 150/Fn;
 Hphz = 20/Fn;
Lphz = 300/Fn;
%[Hb,Ha]=butter(4,(Hphz/s.Rate),'high');
%[Lb,La]=butter(4,(Lphz/s.Rate),'low');
[b,a] = butter(4,[Hphz,Lphz],'bandpass');
Cheby50 = designfilt('bandstopiir', 'PassbandFrequency1', 47, 'StopbandFrequency1', 49, 'StopbandFrequency2', 51, 'PassbandFrequency2', 53, 'PassbandRipple1', 1, 'StopbandAttenuation', 60, 'PassbandRipple2', 1, 'SampleRate', 1000, 'DesignMethod', 'cheby2');
Cheby100 = designfilt('bandstopiir', 'PassbandFrequency1', 97, 'StopbandFrequency1', 99, 'StopbandFrequency2', 101, 'PassbandFrequency2', 103, 'PassbandRipple1', 1, 'StopbandAttenuation', 60, 'PassbandRipple2', 1, 'SampleRate', 1000, 'DesignMethod', 'cheby2');

%% Setup Pulses for genpulses
global outputData
stimLength = 30; 
outputData = genpulses1(50,stimLength);
%% Acquire Data  
% Start the session in the background.
threshold = 0;


%% slut

%fprintf(u,'Ping;1'); % Iniciate connection with robert %Kommenter tilbage
%fscanf(u)
disp('Weigh leg -> Press Reocrd once, press space.')
pause()
tic
startBackground(s);
disp('Starting Threshold measurement')
 pause(2) % Pause for recording EMG Threshold
stop(s)
toc
%%skal udkom til k?re uden EMG 4 linje
% temp = filtfilt(nb1,na1,(filtfilt(nb,na,(filtfilt(b,a,s.UserData.Data(:,1))))));
% temp = abs(temp);
% 70;% mvc
%threshold = mean( abs(filtfilt(Cheby100,(filtfilt(Cheby50,(filtfilt(b,a,s.UserData.Data(:,1))))))))*0.7; % Threshold set to 400% mean 

 %emgf = s.UserData.Data;
%emgf(2:end-1) = s.UserData.Data(2:end-1).^2 - s.UserData.Data(1:end-2).*s.UserData.Data(3:end);
% skift s.user.Data til emgf!

threshold = mean( abs(filtfilt(Cheby100,(filtfilt(Cheby50,(filtfilt(b,a,s.UserData.Data(:,1))))))))*2.5; % Threshold set to 250% mean 
%% new threshold
%% actibity htreshold
actTh=mean(s.UserData.Data)+std(s.UserData.Data)/2
Me=mean(s.UserData.Data)
%%
disp({'Threshold set: ' num2str(threshold)})
disp('Reccord path -> Press and hold reccord, move to start position, release reccord')
disp('Reccord path -> Press and hold reccord, move to end position, release reccord button')
disp('PRESS PLAY ON ROBERT')
pause()


%% THIS IS WHERE IM HAVING ISSUES 
% 1 - Wait position, 2 - FES, 3 - END
state = 1; running = true; rep=10; count=0; t_running = false;
 Stop_point = false; %original false
 Movement = false;%original false
 threshold = 0.01;
%RMS_EMG =1 % Udkommenter denne n?r der IKKE testes
startBackground(s); %igan for at starte m?ling EMG
disp('Traning start pres "SPACE"')
while running
    switch state
        case 1
            if RMS_EMG < threshold && Movement == false% Wating for patient movement
                state = 1;
            elseif RMS_EMG > threshold && Movement == false
                FES_cnt = tic;
                disp('Threshold Passed')
                state = 2;
            end %test of stim: state is set to 2 below - must be deleted for EMG triggering
            %state = 2;
        case 2
        disp('FES protokol')
        
            sendData
            if t_running ~= true % if output is running
            
            %sendData% here i que FES protocol 
            Background % This is a test callback to send ther qued data. 
            t_running = true;
            time_FES(cnt_FES) = toc(FES_cnt);
            cnt_FES = cnt_FES+1;
            
            else
                % Do nothing
            end
            %whileStopPoint
            %drawnow  %This did not work
            %%% I seem to have trouble entering this while loop%%%
            while true
             if Stop_point == true
                 disp('Stop is true')
                    stop(t);
                    %%%1. can you call "outputSingleScan" with a value of 0 after stop
                    %outputSingleScan(t,[0]);
                    t_running = false;
                    break;    
             end 
            % Here I need to start FES% When stop-point is reached stop feedback.
            drawnow
            
            end
            
            count = count+1;
            state = 1;
            disp(['Reppetitions Compleeted: ', num2str(count)])
            disp(Stop_point)
            while true
                if Stop_point == false 
                    break;
                end
                drawnow
            end
            if count == rep
            running = false;
            disp( 'THE END' );
            end
    end
    drawnow  % This seemed to have solved some of the problem, with the first while loop.

end

stop(s)


%% Log Data
% Convert the acquired data and timestamps to a timetable in a workspace variable.
ai0 = s.UserData.Data(:,1);
%ai1 = s.UserData.Data(:,2);
%ai2 = s.UserData.Data(:,3);
DAQ_6 = timetable(seconds(s.UserData.TimeStamps),ai0);

%% Plot Data
% % Plot the acquired data on labeled axes.
% plot(DAQ_6.Time,DAQ_6.Variables)
% xlabel('Time')
% ylabel('Amplitude (V)')
% legend(DAQ_6.Properties.VariableNames)

%% Clean Up
% Remove event listeners and clear the session and channels, if any.
delete(lh1)
delete(lh)
fclose(u);
%delete(lh2)
stop(t)
%outputSingleScan(s,[1.5 4]);
%outputSingleScan(t,(0));
stop(s)
clear s lh1
clear -globals
clear threshold
close figure 1
%% Callback Function
%Define the callback function for the 'DataRequired' event.
% function whileStopPoint(~,~)
% global Stop_point
%             while Stop_point == false  
%              if Stop_point == true
%                     stop(t);
%                     t_running = false;
%                     break;    
%              end 
%             % Here I need to start FES% When stop-point is reached stop feedback.
%             drawnow
%             end
% end

% function TEST_PULS(~,~)
% global t
% startBackground(t);
% pause(3)
% stop(t);
% delete(lh)
% end

function Background(~,~)
global t
startBackground(t);
end

function sendData(~,~) 
global t
global outputData
queueOutputData(t,outputData'); 
end
% Define the callback function for the 'DataAvailable' event.
function recordData(src, eventData)
loop_cnt = tic;
global RMS_EMG
global Movement
global Stop_point
persistent Icount
global Cheby100
global a
global b
global u
global time_EMG
global cnt_EMG
global cnt_loop
global time_loop
global Cheby50
%global threshold

%global threshold

if isempty( Icount ), Icount = 15; end 
% RECORDDATA(SRC, EVENTDATA) records the acquired data, timestamps and
% trigger time. You can also use this function for plotting the
% acquired data live.

% SRC       - Source object      i.e. Session object
% EVENTDATA - Event data object  i.e. 'DataAvailable' event data object

% Record the data and timestamps to the UserData property of the session.
src.UserData.Data = [src.UserData.Data; eventData.Data];
src.UserData.TimeStamps = [src.UserData.TimeStamps; eventData.TimeStamps];

% Record the starttime from the first execution of this callback function.
if isempty(src.UserData.StartTime)
    src.UserData.StartTime = eventData.TriggerTime;
end
% Here we implement filtering of the EMG signal


% Uncomment the following lines to enable live plotting.


 EMG_cnt = tic;
 RMS_EMG = mean( abs(filtfilt(Cheby100,(filtfilt(Cheby50,(filtfilt(b,a,eventData.Data)))))));
 time_EMG(cnt_EMG) = toc(EMG_cnt);
 cnt_EMG = cnt_EMG+1;
 
% bar(RMS_EMG)
% yline(threshold,'LineWidth',2,'label','Threshold');
% xlabel('Time (s)')
% ylabel('Amplitude (V)')
% legend('ai0')
 
%  fprintf(u,'STATUS');
%  temp_status = split(fscanf(u),{';'});
%  Movement = str2num(cell2mat(temp_status(1)));
%  Stop_point = str2num(cell2mat(temp_status(2)));

 Icount = Icount - 1; 
 if Icount == 0, disp('working'), Icount = 15; end 
% % Uncomment the following lines to enable live plotting.
% plot(eventData.TimeStamps, abs(eventData.Data))
% xlabel('Time (s)')
% ylabel('Amplitude (V)')
% legend('ai0','ai1','ai2')
% title ('Filtered signal')
 time_loop(cnt_loop) = toc(loop_cnt);
 cnt_loop = cnt_loop+1;
end